from flask import Flask, request, render_template, send_file
import joblib
import numpy as np
import pandas as pd
import random
import os
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch

app = Flask(__name__)
model = joblib.load('diabetes_model.pkl')
scaler = joblib.load('scaler.pkl')

# Health tips and risk factors
tips = [
    "Drink 8 glasses of water daily.", "Exercise 30 minutes a day.",
    "Eat more vegetables.", "Practice meditation for stress relief."
]
risk_factors = {
    'diet': lambda gluc: "High sugar intake" if gluc > 140 else "Moderate diet",
    'stress': lambda stress: "High stress" if stress > 5 else "Manageable stress",
    'family_history': lambda hist: "Positive" if hist == 1 else "Negative"
}

# PDF template styles
template_styles = {
    'Professional': {
        'header_color': colors.lightslategray,
        'bg_color': colors.aliceblue,
        'font': 'Helvetica-Bold',
        'font_size': 16,
        'accent_color': colors.slategray,
        'border_style': 'GRID',
        'border_width': 0.5,
        'border_color': colors.lightslategray
    },
    'Modern': {
        'header_color': colors.palegreen,
        'bg_color': colors.mintcream,
        'font': 'Times-Bold',
        'font_size': 18,
        'accent_color': colors.darkseagreen,
        'border_style': 'DOUBLEGRID',
        'border_width': 0.75,
        'border_color': colors.palegreen
    },
    'Minimal': {
        'header_color': colors.dimgrey,
        'bg_color': colors.beige,
        'font': 'Helvetica',
        'font_size': 14,
        'accent_color': colors.gray,
        'border_style': 'BOX',
        'border_width': 0.5,
        'border_color': colors.dimgrey
    }
}

def generate_pdf(name, risk, recommendation, factors, tip, template='Professional'):
    pdf_file = f"static/reports/{name}_diabetes_report.pdf"
    os.makedirs(os.path.dirname(pdf_file), exist_ok=True)
    doc = SimpleDocTemplate(pdf_file, pagesize=letter)
    styles = getSampleStyleSheet()
    
    # Custom styles based on template
    t_style = template_styles.get(template, template_styles['Professional'])
    custom_style = ParagraphStyle(
        name='CustomStyle',
        fontName=t_style['font'],
        fontSize=t_style['font_size'],
        textColor=t_style['accent_color']
    )
    header_style = ParagraphStyle(
        name='HeaderStyle',
        fontName=t_style['font'],
        fontSize=t_style['font_size'] + 4,
        textColor=t_style['header_color']
    )

    story = []

    # Add logo (optional, place a logo.png in static/)
    try:
        logo = Image('static/logo.png', width=1*inch, height=1*inch)
        logo.hAlign = 'LEFT'
        story.append(logo)
        story.append(Spacer(1, 0.4*inch))
    except:
        pass

    # Header
    story.append(Paragraph(f"Diabetes Risk Assessment Report", header_style))
    story.append(Spacer(1, 0.4*inch))

    # Content
    story.append(Paragraph(f"<b>Name:</b> {name}", custom_style))
    story.append(Spacer(1, 0.1*inch))
    story.append(Paragraph(f"<b>Risk Score:</b> {risk:.2f}%", custom_style))
    story.append(Spacer(1, 0.1*inch))
    story.append(Paragraph(f"<b>Recommendation:</b> {recommendation}", custom_style))
    story.append(Spacer(1, 0.4*inch))
    story.append(Paragraph(f"<b>Risk Factors:</b>", header_style))
    story.append(Spacer(1, 0.3*inch))
    for factor, value in factors.items():
        story.append(Paragraph(f"{factor.replace('_', ' ').title()}: {value}", custom_style))
        story.append(Spacer(1, 0.1*inch))
    story.append(Paragraph(f"<b>Health Tip:</b> {tip}", custom_style))

    # Footer
    story.append(Spacer(1, 0.4*inch))
    story.append(Paragraph("Generated by Empower Health", styles['Italic']))

    doc.build(story)
    return pdf_file

@app.route('/', methods=['GET', 'POST'])
def predict():
    if request.method == 'POST':
        try:
            name = request.form['Name']
            template = request.form.get('Template', 'Professional')
            input_data = [
                float(request.form['Pregnancies']),
                float(request.form['Glucose']),
                float(request.form['BloodPressure']),
                float(request.form['SkinThickness']),
                float(request.form['Insulin']),
                float(request.form['BMI']),
                float(request.form['DiabetesPedigreeFunction']),
                float(request.form['Age']),
                float(request.form['StressLevel']),
                int(request.form.get('FamilyHistory', 0))
            ]
            if any(x < 0 for x in input_data[:-1]):
                return render_template('index.html', error="Values cannot be negative.", templates=template_styles.keys())

            feature_names = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']
            input_df = pd.DataFrame([input_data[:8]], columns=feature_names)
            input_scaled = scaler.transform(input_df)
            risk = model.predict_proba(input_scaled)[0][1] * 100

            factors = {
                'diet': risk_factors['diet'](input_data[1]),
                'stress': risk_factors['stress'](input_data[8]),
                'family_history': risk_factors['family_history'](input_data[9])
            }
            risk_adjusted = min(100, risk + (5 if factors['diet'] == "High sugar intake" else 0) +
                                (5 if factors['stress'] == "High stress" else 0) +
                                (10 if factors['family_history'] == "Positive" else 0))

            recommendation = "Low risk: Maintain healthy lifestyle."
            if risk_adjusted > 50:
                recommendation = "High risk: Consult a doctor urgently."
                if input_data[5] > 30:
                    recommendation += " Focus on exercise to reduce BMI."
                if input_data[1] > 140:
                    recommendation += " Reduce sugar intake with a balanced diet."
                if input_data[8] > 5:
                    recommendation += " Try meditation or stress management."
            elif input_data[5] > 25:
                recommendation += " Consider light exercise."

            health_tip = random.choice(tips)
            pdf_file = generate_pdf(name, risk_adjusted, recommendation, factors, health_tip, template)

            return render_template('result.html', risk=risk_adjusted, recommendation=recommendation, tip=health_tip, pdf_url=pdf_file)
        except ValueError:
            return render_template('index.html', error="Please enter valid numbers.", templates=template_styles.keys())

    return render_template('index.html', templates=template_styles.keys())

@app.route('/download/<path:filename>')
def download_file(filename):
    return send_file(filename, as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)